// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AssessmentWorkspace page "loading" content renders correctly 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" />
</ContextProvider>"
`;

exports[`AssessmentWorkspace page with ContestVoting question renders correctly 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={7} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}} />
</ContextProvider>"
`;

exports[`AssessmentWorkspace page with MCQ question renders correctly 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={2} replValue=\\"\\" assessment={{...}} />
</ContextProvider>"
`;

exports[`AssessmentWorkspace page with overdue assessment renders correctly 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={false} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}} />
</ContextProvider>"
`;

exports[`AssessmentWorkspace page with programming question renders correctly 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}} />
</ContextProvider>"
`;

exports[`AssessmentWorkspace renders Grading tab correctly if the question has been graded 1`] = `
"<ContextProvider value={{...}}>
  <AssessmentWorkspace assessmentId={4} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} activeEditorTabIndex={0} editorTabs={{...}} editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}} />
</ContextProvider>"
`;
